{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository and Dependencies",
        "description": "Prepare the project environment by ensuring all required dependencies are installed and configured, including browser-image-compression and Shopify file upload system.",
        "details": "Install browser-image-compression (latest stable, e.g., 1.0.12), ensure Node.js (LTS), and TypeScript are up to date. Configure project to use existing media.ts infrastructure and Shopify file upload system. Set up environment variables for Shopify API keys and endpoints. Use npm or yarn for dependency management.",
        "testStrategy": "Verify all dependencies are installed and environment variables are set. Test basic project build and run.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Project Repository",
            "description": "Set up a new or existing project repository for the Weaverse builder, ensuring version control is enabled.",
            "dependencies": [],
            "details": "Create or clone the project repository, initialize Git, and set up the basic project structure if not already present.",
            "status": "done",
            "testStrategy": "Verify that the repository is accessible, Git is initialized, and the project structure is in place."
          },
          {
            "id": 2,
            "title": "Update and Install Core Dependencies",
            "description": "Ensure Node.js (LTS), TypeScript, and package managers (npm or yarn) are up to date. Install browser-image-compression (latest stable version).",
            "dependencies": [
              1
            ],
            "details": "Check and update Node.js and TypeScript versions. Use npm or yarn to install browser-image-compression (e.g., version 1.0.12 or latest stable).",
            "status": "done",
            "testStrategy": "Run 'node -v', 'tsc -v', and 'npm list browser-image-compression' to confirm correct versions are installed."
          },
          {
            "id": 3,
            "title": "Configure Environment Variables for Shopify Integration",
            "description": "Set up environment variables for Shopify API keys and endpoints required for the file upload system.",
            "dependencies": [
              2
            ],
            "details": "Add necessary environment variables (e.g., SHOPIFY_API_KEY, SHOPIFY_API_SECRET, SHOPIFY_ENDPOINT) to the project's .env file or environment configuration.",
            "status": "done",
            "testStrategy": "Check that environment variables are loaded correctly by logging them in a development build (without exposing secrets)."
          },
          {
            "id": 4,
            "title": "Integrate browser-image-compression with media.ts Infrastructure",
            "description": "Modify or extend the existing media.ts module to utilize browser-image-compression for image processing before upload.",
            "dependencies": [
              2
            ],
            "details": "Import browser-image-compression in media.ts, implement image compression logic using async/await or Promise syntax, and ensure compatibility with the current file handling workflow.",
            "status": "done",
            "testStrategy": "Write unit tests or manual tests to verify that images are compressed as expected before upload."
          },
          {
            "id": 5,
            "title": "Connect and Test Shopify File Upload System",
            "description": "Ensure the compressed images from media.ts are correctly uploaded to Shopify using the configured API and endpoints.",
            "dependencies": [
              3,
              4
            ],
            "details": "Implement or verify the upload logic to Shopify, making sure it uses the compressed image output and handles responses and errors appropriately.",
            "status": "done",
            "testStrategy": "Perform end-to-end tests by uploading sample images and confirming successful uploads in the Shopify admin or via API responses."
          }
        ]
      },
      {
        "id": 2,
        "title": "Remove Legacy Upload Endpoint and Route",
        "description": "Remove the old `/api/upload-image` endpoint and route to prevent future usage and ensure backward compatibility.",
        "details": "Delete builder/app/routes/api/upload-image.ts and remove the corresponding route from builder/app/routes.ts. Ensure no references to the old endpoint remain in the codebase.",
        "testStrategy": "Test that the old endpoint is no longer accessible and that all references are removed. Check for any breaking changes in the chat interface.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Update UploadImage Component to Use media.ts Endpoints",
        "description": "Refactor the UploadImage component to use the new media.ts endpoints for image uploads.",
        "details": "Modify builder/app/modules/chatbot/upload-image.tsx to use `/api/media/staged-links` and `/api/media/upload-files` endpoints. Implement file selection and upload logic using the new endpoints. Ensure proper TypeScript typing from ~/types/media.",
        "testStrategy": "Test file selection, upload initiation, and response handling. Verify that the component works with the new endpoints and maintains backward compatibility.",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Image Compression and Validation",
        "description": "Add image compression and file validation to the upload process.",
        "details": "Integrate browser-image-compression (v1.0.12) to compress images before upload (max 2MB, max dimension 1024px). Implement file type and size validation. Use async/await for compression and validation steps.",
        "testStrategy": "Test with various image types and sizes. Verify compression and validation logic, including error handling for invalid files.",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Add Loading States and Error Handling",
        "description": "Implement loading states and robust error handling for the upload process.",
        "details": "Update builder/app/modules/chatbot/input-area.tsx to manage upload state (loading, success, error). Display user feedback during uploads. Handle errors from compression, validation, and Shopify uploads.",
        "testStrategy": "Test upload states and error messages. Simulate network errors and invalid files to ensure graceful handling.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Integrate Staged Upload and Shopify File Creation",
        "description": "Implement the staged upload process and async Shopify file record creation.",
        "details": "Use `/api/media/staged-links` to get upload URLs. Upload compressed files to staged links. Use `/api/media/upload-files` to finalize and create Shopify file records asynchronously. Ensure non-blocking UI during uploads.",
        "testStrategy": "Test staged upload flow and async file creation. Verify that Shopify file records are created and accessible via CDN.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          4,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Optimize Upload Performance and User Feedback",
        "description": "Optimize the upload process for chat performance and provide clear user feedback.",
        "details": "Implement progress indicators for uploads. Optimize chunking and parallel uploads if needed. Ensure user feedback is clear and timely. Leverage Shopify CDN for fast delivery.",
        "testStrategy": "Test upload performance with large files. Verify progress indicators and user feedback. Check CDN delivery speed.",
        "priority": "medium",
        "dependencies": [
          1,
          3,
          4,
          5,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Final Testing and Backward Compatibility Check",
        "description": "Perform comprehensive testing and ensure backward compatibility with the chat interface.",
        "details": "Test all upload scenarios (success, error, cancellation). Verify that no breaking changes are introduced to the chat interface. Ensure all error messages are user-friendly and actionable.",
        "testStrategy": "End-to-end testing of the upload flow. Regression testing of chat interface. User acceptance testing for feedback clarity.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Two-Stage AI Model Workflow for Code Generation",
        "description": "Implement an intelligent code generation workflow using Vercel v0 model for initial code generation from image/text prompts, with conditional refinement to meet Weaverse standards.",
        "status": "in-progress",
        "dependencies": [
          7,
          8
        ],
        "priority": "high",
        "details": "1. Implement AI Developer Mode decision logic in `handleDeveloperWorkflow()`:\n   - Trigger developer mode for image upload + \"create section\" or text-only prompts\n   - Select appropriate tools for code generation\n\n2. Integrate Vercel v0 model:\n   - Create new tool to generate initial code using Vercel v0 model\n   - Accept both image links and text prompts as input\n\n3. Implement code quality assessment:\n   - Evaluate Vercel v0 output against Weaverse standards\n   - Return directly if quality meets standards\n   - Refine code to meet standards when quality is insufficient\n\n4. Remove legacy components:\n   - Eliminate TwoStageWorkflowOrchestrator and related orchestration\n   - Remove UI settings/toggles for old two-stage feature\n   - Delete twoStageSettings from API schema\n\n5. Streamline user experience:\n   - Auto-trigger workflow on image upload + \"create section\"\n   - Use single progress indicator\n\n6. Error handling:\n   - Implement fallback for Vercel v0 failures\n   - Maintain robust API error handling",
        "testStrategy": "1. Core Functionality Testing:\n   - Verify image/text prompts trigger Vercel v0 workflow\n   - Test quality assessment: direct return vs refinement paths\n   - Validate output meets Weaverse component structure and Tailwind v4\n\n2. Integration Testing:\n   - Test Vercel v0 API integration with image/text inputs\n   - Verify removal of twoStageSettings and related UI\n\n3. Quality Assessment Testing:\n   - Validate quality checks against Weaverse standards\n   - Test refinement process with substandard inputs\n\n4. Performance Testing:\n   - Measure Vercel v0 response times\n   - Compare refined vs direct output performance\n\n5. Edge Case Testing:\n   - Test corrupted/invalid images\n   - Verify behavior during Vercel v0 API outages\n   - Test ambiguous text prompts\n\n6. Regression Testing:\n   - Ensure non-image workflows remain functional\n   - Confirm legacy component removal doesn't break features",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Vercel v0 Integration and Workflow Logic",
            "description": "Refactor handleDeveloperWorkflow() to integrate Vercel v0 model with quality assessment and refinement pathways.",
            "dependencies": [],
            "details": "1. Add Vercel v0 API integration handling image/text inputs\n2. Implement quality assessment logic for generated code\n3. Create refinement pathway for substandard outputs\n4. Add developer mode triggering logic\n5. Implement fallback for Vercel v0 failures\n<info added on 2025-06-20T09:01:12.499Z>\nCreate a new tool/function for AI model selection when users request Weaverse section code generation. Tool should be available for AI to choose instead of self-generating code. Focus on tool availability rather than automatic workflow orchestration. Tool integrates with Vercel v0 API, receives image/text inputs, assesses output quality, and refines code before returning to user.\n</info added on 2025-06-20T09:01:12.499Z>\n<info added on 2025-06-20T09:05:23.881Z>\n✅ IMPLEMENTATION COMPLETE: Successfully created generateCodeWithVercel tool for AI model selection\n\nImplementation Details:\n- Created vercel-code-generation.ts tool with Zod schema validation\n- Integrated with existing generateReactCodeFromImage function for Vercel v0 API calls\n- Implemented comprehensive quality assessment logic for Weaverse compatibility:\n  * Validates @weaverse/hydrogen imports and patterns\n  * Checks forwardRef usage and proper exports\n  * Assesses modern React patterns and TypeScript integration\n  * Provides 1-10 scale scoring with detailed improvement suggestions\n- Added structured response format with automatic refinement recommendations\n- Registered tool in index.ts for AI discovery and selection\n- Includes proper error handling and logging throughout workflow\n\nTool now available for AI to choose when users request Weaverse section code generation, providing intelligent quality assessment and conditional refinement based on established compatibility criteria.\n</info added on 2025-06-20T09:05:23.881Z>\n<info added on 2025-06-20T09:09:58.128Z>\n🔄 IMPLEMENTATION UPDATED: Refactored to use prompt-based AI quality assessment instead of manual analysis\n\n📝 User Feedback Addressed:\n- Removed manual assessCodeQuality() function per user request\n- Integrated proper prompt-based assessment using existing DEVELOPER_SYSTEM_PROMPT\n- Uses AI model for intelligent code quality evaluation instead of hardcoded rules\n\n🛠️ Refactoring Changes Made:\n1. **Removed Manual Assessment**: Eliminated hardcoded quality checking logic\n2. **AI-Powered Assessment**: Now uses generateObject() with the existing DEVELOPER_SYSTEM_PROMPT for intelligent evaluation\n3. **Proper Model Integration**: Uses the configured model from '../model' instead of hardcoded model ID\n4. **Structured AI Response**: AI provides structured assessment with score, issues, suggestions, and optionally refined code\n5. **Comprehensive Prompting**: Assessment prompt includes Weaverse compatibility criteria, React/TypeScript quality standards, and Shopify integration patterns\n\n🎯 Enhanced AI Assessment Features:\n- Uses existing DEVELOPER_SYSTEM_PROMPT for consistent evaluation standards\n- AI analyzes code against 4 weighted criteria: Weaverse compatibility (40%), React/TypeScript quality (30%), Shopify integration (20%), code structure (10%)\n- AI can optionally provide refined code that addresses identified issues\n- Proper fallback handling if AI assessment fails\n- More intelligent and context-aware quality evaluation\n\n✅ Technical Implementation:\n- Fixed import to use generateObject from 'ai' package\n- Uses existing model from '../model' for consistency\n- Proper TypeScript typing with fallback values\n- Structured response format with comprehensive metadata\n- Error handling and logging throughout\n\nThe tool now leverages the sophisticated AI system and existing prompts instead of manual rule-based assessment, providing much more intelligent and contextual code quality evaluation.\n</info added on 2025-06-20T09:09:58.128Z>\n<info added on 2025-06-20T09:19:51.008Z>\n📋 ADDITIONAL IMPROVEMENT COMPLETED: Prompt System Consolidation\n\n🔄 User-Requested Enhancement:\n- Successfully merged two separate prompt files into unified system\n- Eliminated redundancy and improved maintainability\n\n✅ Consolidation Details:\n1. **Created Unified Prompt**: Combined developer-system-prompt.ts and image-to-section.md into unified-developer-prompt.md\n2. **Updated All References**: Modified 4 files to use new unified prompt:\n   - vercel-code-generation.ts\n   - image-to-section.ts \n   - prompt.ts\n   - default-config.ts\n3. **Cleaned Up Redundant Files**: Removed old prompt files to eliminate duplication\n4. **Fixed SSR Error**: Resolved build error caused by missing developer-system-prompt reference\n5. **Code Formatting**: Applied biome formatting to all updated files\n\n🎯 Benefits Achieved:\n- Single source of truth for all developer prompts\n- Reduced maintenance overhead\n- Consistent AI behavior across all tools\n- Cleaner codebase architecture\n- Eliminated SSR build errors\n\nThe Vercel v0 code generation tool now uses the same comprehensive prompt system as all other developer tools, ensuring consistent and high-quality AI responses across the entire development workflow.\n</info added on 2025-06-20T09:19:51.008Z>\n<info added on 2025-06-20T09:27:09.137Z>\n🎯 INTELLIGENT CONTEXT DETECTION IMPLEMENTED: Fixed AI developer mode recognition\n\n🔍 Issue Identified:\n- When users said \"💻 Developer Mode\" with image upload, AI wasn't directly using generateCodeWithVercel tool\n- Context detection wasn't recognizing explicit developer mode requests\n- generateCodeWithVercel tool wasn't included in developer context filtering\n\n✅ Solution Implemented:\n1. **Enhanced Context Keywords**: Added explicit developer mode detection terms:\n   - \"developer mode\", \"dev mode\", \"💻 developer mode\"\n   - \"vercel\", \"code generation\", \"component files\"\n   \n2. **Improved Image Context Detection**: Added priority-based explicit mode detection:\n   - Explicit developer terms get highest priority when image is attached\n   - Recognizes \"💻 Developer Mode\" as immediate developer context trigger\n   \n3. **Tool Prioritization**: Updated developer tools filtering to include and prioritize generateCodeWithVercel:\n   - Added generateCodeWithVercel to developer tools list\n   - Made it the #1 priority tool in developer mode\n   - Ensures AI chooses Vercel tool directly instead of asking for clarification\n\n🚀 Result: \nNow when users upload image and say \"💻 Developer Mode\", the AI will:\n- Detect developer context immediately\n- Have generateCodeWithVercel as primary available tool\n- Generate code directly with Vercel v0 without asking studio/dev mode questions\n\nFiles Updated:\n- builder/app/.server/ai/index.ts: Added tool to developer context filtering\n- builder/app/.server/ai/config/default-config.ts: Enhanced keyword detection  \n- builder/app/.server/ai/core/context-manager.ts: Improved image context logic\n</info added on 2025-06-20T09:27:09.137Z>\n<info added on 2025-06-20T09:30:37.980Z>\n🐛 DEBUGGING ENHANCEMENT: Fixed context detection for \"Generate weaverse section from this image\"\n\n🔍 Issue Reported:\n- User prompt: \"Generate weaverse section from this image\" \n- Expected: Developer mode detection\n- Actual: Auto mode (not detecting developer context)\n\n🛠️ Debug Solution Implemented:\n\n1. Enhanced Keywords Coverage:\n   - Added \"generate section\", \"generate weaverse section\"\n   - Added \"weaverse section\", \"section from\", \"section from image\"\n   - Now covers multiple variations of section generation requests\n\n2. Comprehensive Debug Logging:\n   Added detailed context detection debug output showing:\n   - Original prompt and lowercase version\n   - Image attachment status\n   - Developer vs studio keyword matches count\n   - List of matched keywords\n   - Specific keyword that triggered detection\n\n3. Improved Detection Logic:\n   - Added explicit term matching with debug output\n   - Shows which specific keyword triggered the detection\n   - Logs the decision-making process step by step\n\n🎯 Expected Result:\nNow \"Generate weaverse section from this image\" should:\n- Match \"generate weaverse section\" OR \"weaverse section\" OR \"section from\" \n- Log: \"🎯 DEVELOPER: Matched explicit term: 'weaverse section'\"\n- Return developer context correctly\n- Use generateCodeWithVercel tool as primary option\n\n📝 Files Updated:\n- context-manager.ts: Enhanced keyword detection + comprehensive debug logging\n- default-config.ts: Added section generation keywords\n\n🧪 Ready for Testing: Debug logs will now show exactly why context detection succeeds or fails for any prompt.\n</info added on 2025-06-20T09:30:37.980Z>\n<info added on 2025-06-20T09:36:47.558Z>\n🎯 SIMPLIFIED APPROACH: Removed AI assessment step, send developer prompt directly to Vercel v0\n\n🔄 User Feedback Implemented:\n- Removed complex assessCodeQualityWithAI() function  \n- Eliminated two-step process (generate → assess → refine)\n- Now sends comprehensive developer prompt directly to Vercel v0 model\n- Let Vercel v0 understand and implement Weaverse requirements from the start\n\n✅ Simplified Implementation:\n\n1. Single-Step Process: Direct prompt → Vercel v0 → quality code\n2. Comprehensive Prompting: Includes full UNIFIED_DEVELOPER_PROMPT with specific Weaverse requirements:\n   - Component File (index.tsx): Use forwardRef for proper DOM element access, Import from @weaverse/hydrogen and @shopify/hydrogen, Extend HydrogenComponentProps interface, Export component as default\n   - Schema Definition: Use createSchema() function from @weaverse/hydrogen, Include proper component settings/inputs, Export as 'schema'\n   - TypeScript Definitions (if needed): Proper interface extending HydrogenComponentProps, Include all component props with correct types\n\n3. Clean Response: Returns generated code directly without complexity of assessment metadata\n\n🚀 Benefits:\n- Much simpler and faster workflow\n- Relies on Vercel v0's capability to understand detailed requirements\n- Eliminates potential AI assessment errors\n- More straightforward user experience\n- Better performance (single API call vs multiple calls)\n\n📁 Technical Changes:\n- Removed 80+ lines of assessment logic\n- Fixed function signature to use proper CoreMessage[] format\n- Returns result.reactCode directly as code in response\n- Handles both image and text-only prompts correctly\n\n🎯 Result: Tool now sends rich context directly to Vercel v0, trusting it to generate proper Weaverse-compatible code from comprehensive instructions rather than post-processing.\n</info added on 2025-06-20T09:36:47.558Z>\n<info added on 2025-06-20T09:41:44.480Z>\n🐛 CRITICAL FIXES: Resolved tool selection conflict and token limit issues\n\n🔍 Problems Identified from Logs:\n\n1. Tool Selection Conflict: AI was choosing unifiedImageToSection instead of generateCodeWithVercel even though both were available in developer mode\n2. System Prompt Too Large: \"System prompt and tools are too large, might exceed token limit\" causing severe message trimming\n\n🛠️ Solutions Implemented:\n\nFix 1: Removed Tool Conflict\n- Removed unifiedImageToSection from developer tools filtering list\n- Now developer mode only has generateCodeWithVercel for image-to-code generation\n- Eliminates confusion between similar tools\n- Forces AI to use the correct Vercel v0 tool\n\nFix 2: Created Concise Developer Prompt\n- Created CONCISE_DEVELOPER_PROMPT (compact version) for system context\n- Replaced large UNIFIED_DEVELOPER_PROMPT in chatbot config to avoid token limits\n- generateCodeWithVercel tool still uses full UNIFIED_DEVELOPER_PROMPT internally when calling Vercel v0\n- Maintains comprehensive context for code generation while reducing system prompt size\n\n📊 Technical Changes:\nOLD Developer Tools (conflict): ['generateCodeWithVercel', 'generateCode', 'generateSchemas', 'getShopifyResourcesFieldsInfo', 'unifiedImageToSection', ...]\nNEW Developer Tools (focused): ['generateCodeWithVercel', 'generateCode', 'generateSchemas', 'getShopifyResourcesFieldsInfo', ...]\n\nOLD: Large unified prompt causing token limits - developer: UNIFIED_DEVELOPER_PROMPT (~3000+ characters)\nNEW: Concise prompt for system context - developer: CONCISE_DEVELOPER_PROMPT (~800 characters)\n\n🎯 Expected Result:\nNow when user says \"Generate weaverse section from this image\", AI should:\n- Detect developer context correctly (already working)\n- See only generateCodeWithVercel tool available for image-to-code\n- Choose generateCodeWithVercel without confusion\n- Avoid token limit issues with concise system prompt\n- Still generate high-quality code using full context internally\n\n📁 Files Updated:\n- index.ts: Removed unifiedImageToSection from developer context\n- default-config.ts: Added concise developer prompt + updated config\n</info added on 2025-06-20T09:41:44.480Z>\n<info added on 2025-06-20T09:46:35.363Z>\nFixed critical generateReactCodeFromImage function that was returning Vercel v0 error instead of actual React code. Root cause was massive 17k+ character prompt overwhelming Vercel v0 model. Solution: Created focused 300-character prompt optimized for Vercel v0's React generation capabilities, removed complex Weaverse instructions that confused the model, and improved error handling with proper result.reactCode access. Function now generates actual React components instead of \"I'm sorry. I'm not able to assist with that.\" error responses.\n</info added on 2025-06-20T09:46:35.363Z>\n<info added on 2025-06-20T09:52:33.517Z>\nFixed critical UI display issue where AI agent wasn't showing generated code to users despite successful tool execution. Enhanced CONCISE_DEVELOPER_PROMPT with explicit instructions for AI to always display tool results in chat. Added step-by-step guidance for tool result handling: extract code from generateCodeWithVercel response, format in markdown code blocks, and explain component features to user. This ensures the 6,751+ character React components generated by the tool are properly presented to users instead of the AI staying silent after successful tool execution.\n</info added on 2025-06-20T09:52:33.517Z>",
            "status": "done",
            "testStrategy": "Unit tests for Vercel v0 API integration, quality assessment logic tests, refinement pathway validation, fallback behavior tests"
          },
          {
            "id": 2,
            "title": "Remove Legacy Components and Streamline UX",
            "description": "Eliminate deprecated two-stage elements and simplify user interaction flow.",
            "dependencies": [
              1
            ],
            "details": "1. Delete TwoStageWorkflowOrchestrator component and related files\n2. Remove UI toggles/settings for old two-stage workflow\n3. Prune twoStageSettings from API schema\n4. Implement single progress indicator\n5. Configure auto-trigger on image upload + 'create section'",
            "status": "pending",
            "testStrategy": "UI rendering tests, end-to-end workflow triggering tests, schema validation"
          },
          {
            "id": 3,
            "title": "Implement Quality Enforcement and Error Resilience",
            "description": "Establish quality standards and robust error handling for generated code.",
            "dependencies": [
              1
            ],
            "details": "1. Define Weaverse quality standards validators\n2. Implement Tailwind v4 syntax enforcement\n3. Create error boundaries with retry mechanisms\n4. Add logging for quality assessment events\n5. Implement refinement process for substandard code",
            "status": "pending",
            "testStrategy": "Quality validator unit tests, Tailwind v4 linter checks, error injection tests, refinement process validation"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-17T15:07:11.528Z",
      "updated": "2025-06-20T09:05:29.268Z",
      "description": "Tasks for master context"
    }
  }
}